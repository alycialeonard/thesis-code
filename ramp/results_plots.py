import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import matplotlib.ticker as ticker
from matplotlib.ticker import (MultipleLocator, FormatStrFormatter,
                               AutoMinorLocator)

eval_energy = pd.read_csv('C:\\Users\\alyci\\PycharmProjects\\RAMP\\RAMP_MultiYear\\results\\v3\\eval\\energy_results.csv', dtype=np.float64)
eval_power = pd.read_csv('C:\\Users\\alyci\\PycharmProjects\\RAMP\\RAMP_MultiYear\\results\\v4\\power_results.csv', dtype=np.float64)
case_energy = pd.read_csv('C:\\Users\\alyci\\PycharmProjects\\RAMP\\RAMP_MultiYear\\results\\v3\\case\\energy_results_case.csv', dtype=np.float64)
case_power = pd.read_csv('C:\\Users\\alyci\\PycharmProjects\\RAMP\\RAMP_MultiYear\\results\\v3\\case\\power_results_case.csv', dtype=np.float64)
ch6_power = pd.read_csv('C:\\Users\\alyci\\OneDrive - Nexus365\\Thesis\\ch6_analysis\\homer\\demand\\power_results.csv')
ch6_energy = pd.read_csv('C:\\Users\\alyci\\PycharmProjects\\RAMP\\RAMP_MultiYear\\results\\ch6\\energy_results.csv')
sdewes_power = pd.read_csv('C:\\Users\\alyci\\OneDrive - Nexus365\\CCG\\SDEWES\\ramp results\\power_results.csv')

fig7, ax7 = plt.subplots()
plt.xticks(np.arange(0, 1440, 120))
ticks = ticker.FuncFormatter(lambda x, pos: '{0:g}'.format(x/60))
ax7.xaxis.set_major_formatter(ticks)
ax7.xaxis.set_minor_locator(MultipleLocator(60))
ax7.yaxis.set_minor_locator(MultipleLocator(1))
plt.grid(alpha=0.5)
plt.grid(alpha=0.5,which='minor')
plt.plot(sdewes_power['minute'], sdewes_power['east_lo_P_avg_kW'], label="East, Wealth-adjusted", c='orange')
plt.fill_between(sdewes_power['minute'], sdewes_power['east_lo_P_min_kW'], sdewes_power['east_lo_P_max_kW'], facecolor='bisque', alpha=0.5)
plt.plot(sdewes_power['minute'], sdewes_power['east_mid_P_avg_kW'], label="East, Wealth-equalized", c='hotpink')
plt.fill_between(sdewes_power['minute'], sdewes_power['east_mid_P_min_kW'], sdewes_power['east_mid_P_max_kW'], facecolor='lightpink', alpha=0.5)
plt.plot(sdewes_power['minute'], sdewes_power['east_hi_P_avg_kW'], label="East, Electrified-only", c='green')
plt.fill_between(sdewes_power['minute'], sdewes_power['east_hi_P_min_kW'], sdewes_power['east_hi_P_max_kW'], facecolor='lightgreen', alpha=0.5)
plt.legend(loc='upper left')
ax7.set_xlim(0, 1440)
ax7.set_ylim(0, 40)
plt.xlabel("Hour of the day")
plt.ylabel("Average daily community load, 200 homes (kW)")
#plt.show()
plt.close()


fig7, ax7 = plt.subplots()
plt.xticks(np.arange(0, 1440, 120))
ticks = ticker.FuncFormatter(lambda x, pos: '{0:g}'.format(x/60))
ax7.xaxis.set_major_formatter(ticks)
ax7.xaxis.set_minor_locator(MultipleLocator(60))
ax7.yaxis.set_minor_locator(MultipleLocator(1))
plt.grid(alpha=0.5)
plt.grid(alpha=0.5,which='minor')
plt.plot(ch6_power['minute'], ch6_power['lo_P_avg_kW'], label="Low-end", c='orange')
plt.fill_between(ch6_power['minute'], ch6_power['lo_P_min_kW'], ch6_power['lo_P_max_kW'], facecolor='bisque', alpha=0.5)
plt.plot(ch6_power['minute'], ch6_power['mi_P_avg_kW'], label="Mid-level", c='hotpink')
plt.fill_between(ch6_power['minute'], ch6_power['mi_P_min_kW'], ch6_power['mi_P_max_kW'], facecolor='lightpink', alpha=0.5)
plt.plot(ch6_power['minute'], ch6_power['hi_P_avg_kW'], label="High-end", c='green')
plt.fill_between(ch6_power['minute'], ch6_power['hi_P_min_kW'], ch6_power['hi_P_max_kW'], facecolor='lightgreen', alpha=0.5)
plt.legend(loc='upper left')
#plt.xticks(np.arange(0, 1440, 120))
#ticks = ticker.FuncFormatter(lambda x, pos: '{0:g}'.format(x/60))
#ax7.xaxis.set_major_formatter(ticks)
#ax7.xaxis.set_minor_locator(MultipleLocator(60))
ax7.set_xlim(0, 1440)
ax7.set_ylim(0, 28)
plt.xlabel("Hour of the day")
plt.ylabel("Average daily community load, n=133 (kW)")
#plt.show()
plt.savefig("C:\\Users\\alyci\\OneDrive - Nexus365\\Thesis\\Corrections\\design-demand-profile-3.png")
plt.close()

fig1, ax1 = plt.subplots()
plt.grid(b=True, which='major', color='lightgrey', linestyle='-')
ax1.boxplot([ch6_energy['lo_E_kWh'], ch6_energy['hi_E_kWh']])
ax1.set_xticklabels(['Low-end', 'High-end'])
plt.xlabel("Demand estimation approach")
plt.ylabel("Average daily energy consumption, n=133 (kWh)")
ax1.set_ylim(0, 350)
#plt.show()
plt.close()



fig7, ax7 = plt.subplots()
plt.xticks(np.arange(0, 1440, 120))
ticks = ticker.FuncFormatter(lambda x, pos: '{0:g}'.format(x/60))
ax7.xaxis.set_major_formatter(ticks)
ax7.xaxis.set_minor_locator(MultipleLocator(60))
ax7.yaxis.set_minor_locator(MultipleLocator(1))
plt.grid(alpha=0.5)
plt.grid(alpha=0.5,which='minor')
plt.plot(eval_power['minute'], eval_power['S_P_avg_kW'], label="North", c='maroon')
plt.fill_between(eval_power['minute'], eval_power['S_P_min_kW'], eval_power['S_P_max_kW'], facecolor='indianred', alpha=0.5)
plt.plot(eval_power['minute'], eval_power['S_v4_P_avg_kW'], label="North (wealth adjusted)", c='green')
plt.fill_between(eval_power['minute'], eval_power['S_v4_P_min_kW'], eval_power['S_v4_P_max_kW'], facecolor='lightgreen', alpha=0.5)
plt.legend(loc='upper left')
#plt.xticks(np.arange(0, 1440, 120))
#ticks = ticker.FuncFormatter(lambda x, pos: '{0:g}'.format(x/60))
#ax7.xaxis.set_major_formatter(ticks)
#ax7.xaxis.set_minor_locator(MultipleLocator(60))
ax7.set_xlim(0, 1440)
ax7.set_ylim(0, 60)
plt.xlabel("Hour of the day")
plt.ylabel("Average daily community load, n=200 (kW)")
plt.close()
#plt.show()





fig1, ax1 = plt.subplots()
plt.grid(b=True, which='major', color='lightgrey', linestyle='-')
ax1.boxplot([eval_energy['T1_E_kWh'], eval_energy['T2_E_kWh'], eval_energy['R_E_kWh'], eval_energy['N_E_kWh'], eval_energy['E_E_kWh'], eval_energy['S_E_kWh'], eval_energy['O_E_kWh'], eval_energy['U_E_kWh'], eval_energy['W_E_kWh'], eval_energy['T4_E_kWh']])
ax1.set_xticklabels(['T1', 'T2', 'Rural', 'North', 'East', 'South', 'All', 'Urban', 'West', 'T4'])
plt.xlabel("Province or data subset")
plt.ylabel("Daily energy consumption, n=200 (kWh)")
#ax1.set_ylim(350, 750)
#plt.show()
plt.close()

fig7, ax7 = plt.subplots()
plt.xticks(np.arange(0, 1440, 120))
ticks = ticker.FuncFormatter(lambda x, pos: '{0:g}'.format(x/60))
ax7.xaxis.set_major_formatter(ticks)
ax7.xaxis.set_minor_locator(MultipleLocator(60))
ax7.yaxis.set_minor_locator(MultipleLocator(2))
plt.grid(alpha=0.5)
plt.grid(alpha=0.5,which='minor')
plt.plot(eval_power['minute'], eval_power['N_P_avg_kW'], label="North", c='maroon')
plt.fill_between(eval_power['minute'], eval_power['N_P_min_kW'], eval_power['N_P_max_kW'], facecolor='indianred', alpha=0.5)
plt.plot(eval_power['minute'], eval_power['S_P_avg_kW'], label="South", c='green')
plt.fill_between(eval_power['minute'], eval_power['S_P_min_kW'], eval_power['S_P_max_kW'], facecolor='lightgreen', alpha=0.5)
plt.plot(eval_power['minute'], eval_power['E_P_avg_kW'], label="East", c='goldenrod')
plt.fill_between(eval_power['minute'], eval_power['E_P_min_kW'], eval_power['E_P_max_kW'], facecolor='palegoldenrod', alpha=0.5)
plt.plot(eval_power['minute'], eval_power['W_P_avg_kW'], label="West", c='teal')
plt.fill_between(eval_power['minute'], eval_power['W_P_min_kW'], eval_power['W_P_max_kW'], facecolor='paleturquoise', alpha=0.5)
#plt.plot(eval_power['minute'], eval_power['T1_P_avg_kW'], label="T1", c='maroon')
#plt.fill_between(eval_power['minute'], eval_power['T1_P_min_kW'], eval_power['T1_P_max_kW'], facecolor='indianred', alpha=0.5)
#plt.plot(eval_power['minute'], eval_power['T2_P_avg_kW'], label="T2", c='teal')
#plt.fill_between(eval_power['minute'], eval_power['T2_P_min_kW'], eval_power['T2_P_max_kW'], facecolor='paleturquoise', alpha=0.5)
#plt.plot(eval_power['minute'], eval_power['T4_dutycycle_P_avg_kW'], label="T4", c='hotpink')
#plt.fill_between(eval_power['minute'], eval_power['T4_dutycycle_P_min_kW'], eval_power['T4_dutycycle_P_max_kW'], facecolor='lightpink', alpha=0.5)
plt.legend(loc='upper left')
#plt.xticks(np.arange(0, 1440, 120))
#ticks = ticker.FuncFormatter(lambda x, pos: '{0:g}'.format(x/60))
#ax7.xaxis.set_major_formatter(ticks)
#ax7.xaxis.set_minor_locator(MultipleLocator(60))
ax7.set_xlim(0, 1440)
ax7.set_ylim(0, 60)
plt.xlabel("Hour of the day")
plt.ylabel("Average daily community load, n=200 (kW)")
plt.savefig("C:\\Users\\alyci\\OneDrive - Nexus365\\Thesis\\Corrections\\demand-power-regions-3.png")
plt.close()
#plt.show()

fig7, ax7 = plt.subplots()
plt.xticks(np.arange(0, 1440, 120))
ticks = ticker.FuncFormatter(lambda x, pos: '{0:g}'.format(x/60))
ax7.xaxis.set_major_formatter(ticks)
ax7.xaxis.set_minor_locator(MultipleLocator(60))
ax7.yaxis.set_minor_locator(MultipleLocator(2))
plt.grid(alpha=0.5)
plt.grid(alpha=0.5,which='minor')
plt.plot(eval_power['minute'], eval_power['N_P_avg_kW'], label="North", c='darkgray')
plt.fill_between(eval_power['minute'], eval_power['N_P_min_kW'], eval_power['N_P_max_kW'], facecolor='lightgray', alpha=0.5)
plt.plot(eval_power['minute'], eval_power['S_P_avg_kW'], label="South", c='darkgray')
plt.fill_between(eval_power['minute'], eval_power['S_P_min_kW'], eval_power['S_P_max_kW'], facecolor='lightgray', alpha=0.5)
plt.plot(eval_power['minute'], eval_power['E_P_avg_kW'], label="East", c='darkgray')
plt.fill_between(eval_power['minute'], eval_power['E_P_min_kW'], eval_power['E_P_max_kW'], facecolor='lightgray', alpha=0.5)
plt.plot(eval_power['minute'], eval_power['W_P_avg_kW'], label="West", c='darkgray')
plt.fill_between(eval_power['minute'], eval_power['W_P_min_kW'], eval_power['W_P_max_kW'], facecolor='lightgray', alpha=0.5)
plt.plot(eval_power['minute'], eval_power['T1_P_avg_kW'], label="T1", c='orange')
plt.fill_between(eval_power['minute'], eval_power['T1_P_min_kW'], eval_power['T1_P_max_kW'], facecolor='bisque', alpha=0.5)
plt.plot(eval_power['minute'], eval_power['T2_P_avg_kW'], label="T2", c='purple')
plt.fill_between(eval_power['minute'], eval_power['T2_P_min_kW'], eval_power['T2_P_max_kW'], facecolor='plum', alpha=0.5)
plt.plot(eval_power['minute'], eval_power['T4_dutycycle_P_avg_kW'], label="T4", c='blue')
plt.fill_between(eval_power['minute'], eval_power['T4_dutycycle_P_min_kW'], eval_power['T4_dutycycle_P_max_kW'], facecolor='lightblue', alpha=0.5)
plt.legend(loc='upper left')
#plt.xticks(np.arange(0, 1440, 120))
#ticks = ticker.FuncFormatter(lambda x, pos: '{0:g}'.format(x/60))
#ax7.xaxis.set_major_formatter(ticks)
#ax7.xaxis.set_minor_locator(MultipleLocator(60))
ax7.set_xlim(0, 1440)
ax7.set_ylim(0, 60)
plt.xlabel("Hour of the day")
plt.ylabel("Average daily community load, n=200 (kW)")
plt.savefig("C:\\Users\\alyci\\OneDrive - Nexus365\\Thesis\\Corrections\\demand-power-regions-tiers-crop-3.png")
plt.close()
#plt.show()

fig7, ax7 = plt.subplots()
plt.xticks(np.arange(0, 1440, 120))
ticks = ticker.FuncFormatter(lambda x, pos: '{0:g}'.format(x/60))
ax7.xaxis.set_major_formatter(ticks)
ax7.xaxis.set_minor_locator(MultipleLocator(60))
ax7.yaxis.set_minor_locator(MultipleLocator(2))
plt.grid(alpha=0.5)
plt.grid(alpha=0.5,which='minor')
plt.plot(eval_power['minute'], eval_power['U_P_avg_kW'], label="Urban", c='hotpink')
plt.fill_between(eval_power['minute'], eval_power['U_P_min_kW'], eval_power['U_P_max_kW'], facecolor='lightpink', alpha=0.5)
plt.plot(eval_power['minute'], eval_power['R_P_avg_kW'], label="Rural", c='deepskyblue')
plt.fill_between(eval_power['minute'], eval_power['R_P_min_kW'], eval_power['R_P_max_kW'], facecolor='lightskyblue', alpha=0.5)
plt.plot(eval_power['minute'], eval_power['O_P_avg_kW'], label="All", c='olive')
plt.fill_between(eval_power['minute'], eval_power['O_P_min_kW'], eval_power['O_P_max_kW'], facecolor='lightgreen', alpha=0.5)
#plt.plot(eval_power['minute'], eval_power['T1_P_avg_kW'], label="T1", c='orange')
#plt.fill_between(eval_power['minute'], eval_power['T1_P_min_kW'], eval_power['T1_P_max_kW'], facecolor='bisque', alpha=0.5)
#plt.plot(eval_power['minute'], eval_power['T2_P_avg_kW'], label="T2", c='purple')
#plt.fill_between(eval_power['minute'], eval_power['T2_P_min_kW'], eval_power['T2_P_max_kW'], facecolor='plum', alpha=0.5)
#plt.plot(eval_power['minute'], eval_power['T4_dutycycle_P_avg_kW'], label="T4", c='blue')
#plt.fill_between(eval_power['minute'], eval_power['T4_dutycycle_P_min_kW'], eval_power['T4_dutycycle_P_max_kW'], facecolor='lightblue', alpha=0.5)
plt.legend(loc='upper left')
#plt.xticks(np.arange(0, 1440, 120))
#ticks = ticker.FuncFormatter(lambda x, pos: '{0:g}'.format(x/60))
#ax7.xaxis.set_major_formatter(ticks)
#ax7.xaxis.set_minor_locator(MultipleLocator(60))
ax7.set_xlim(0, 1440)
ax7.set_ylim(0, 60)
plt.xlabel("Hour of the day")
plt.ylabel("Average daily community load, n=200 (kW)")
plt.savefig("C:\\Users\\alyci\\OneDrive - Nexus365\\Thesis\\Corrections\\demand-power-area-3.png")
plt.close()
#plt.show()

fig7, ax7 = plt.subplots()
plt.xticks(np.arange(0, 1440, 120))
ticks = ticker.FuncFormatter(lambda x, pos: '{0:g}'.format(x/60))
ax7.xaxis.set_major_formatter(ticks)
ax7.xaxis.set_minor_locator(MultipleLocator(60))
ax7.yaxis.set_minor_locator(MultipleLocator(2))
plt.grid(alpha=0.5)
plt.grid(alpha=0.5,which='minor')
plt.plot(eval_power['minute'], eval_power['U_P_avg_kW'], label="Urban", c='darkgray')
plt.fill_between(eval_power['minute'], eval_power['U_P_min_kW'], eval_power['U_P_max_kW'], facecolor='lightgray', alpha=0.5)
plt.plot(eval_power['minute'], eval_power['R_P_avg_kW'], label="Rural", c='darkgray')
plt.fill_between(eval_power['minute'], eval_power['R_P_min_kW'], eval_power['R_P_max_kW'], facecolor='lightgray', alpha=0.5)
plt.plot(eval_power['minute'], eval_power['O_P_avg_kW'], label="All", c='darkgray')
plt.fill_between(eval_power['minute'], eval_power['O_P_min_kW'], eval_power['O_P_max_kW'], facecolor='lightgray', alpha=0.5)
plt.plot(eval_power['minute'], eval_power['T1_P_avg_kW'], label="T1", c='orange')
plt.fill_between(eval_power['minute'], eval_power['T1_P_min_kW'], eval_power['T1_P_max_kW'], facecolor='bisque', alpha=0.5)
plt.plot(eval_power['minute'], eval_power['T2_P_avg_kW'], label="T2", c='purple')
plt.fill_between(eval_power['minute'], eval_power['T2_P_min_kW'], eval_power['T2_P_max_kW'], facecolor='plum', alpha=0.5)
plt.plot(eval_power['minute'], eval_power['T4_dutycycle_P_avg_kW'], label="T4", c='blue')
plt.fill_between(eval_power['minute'], eval_power['T4_dutycycle_P_min_kW'], eval_power['T4_dutycycle_P_max_kW'], facecolor='lightblue', alpha=0.5)
plt.legend(loc='upper left')
#plt.xticks(np.arange(0, 1440, 120))
#ticks = ticker.FuncFormatter(lambda x, pos: '{0:g}'.format(x/60))
#ax7.xaxis.set_major_formatter(ticks)
#ax7.xaxis.set_minor_locator(MultipleLocator(60))
ax7.set_xlim(0, 1440)
ax7.set_ylim(0, 60)
plt.xlabel("Hour of the day")
plt.ylabel("Average daily community load, n=200 (kW)")
plt.savefig("C:\\Users\\alyci\\OneDrive - Nexus365\\Thesis\\Corrections\\demand-power-area-tiers-crop-3.png")
plt.close()
#plt.show()


fig7, ax7 = plt.subplots()
plt.xticks(np.arange(0, 1440, 120))
ticks = ticker.FuncFormatter(lambda x, pos: '{0:g}'.format(x/60))
ax7.xaxis.set_major_formatter(ticks)
ax7.xaxis.set_minor_locator(MultipleLocator(60))
ax7.yaxis.set_major_locator(MultipleLocator(10))
ax7.yaxis.set_minor_locator(MultipleLocator(2))
plt.grid(alpha=0.5)
plt.grid(alpha=0.5,which='minor')
plt.plot(eval_power['minute'], eval_power['O_Weekend_P_avg_kW'], label="Weekend", c='goldenrod')
plt.fill_between(eval_power['minute'], eval_power['O_Weekend_P_min_kW'], eval_power['O_Weekend_P_max_kW'], facecolor='palegoldenrod', alpha=0.5)
plt.plot(eval_power['minute'], eval_power['O_Weekday_P_avg_kW'], label="Weekday", c='teal')
plt.fill_between(eval_power['minute'], eval_power['O_Weekday_P_min_kW'], eval_power['O_Weekday_P_max_kW'], facecolor='paleturquoise', alpha=0.5)
plt.legend(loc='upper left')
#plt.xticks(np.arange(0, 1440, 120))
#ticks = ticker.FuncFormatter(lambda x, pos: '{0:g}'.format(x/60))
#ax7.xaxis.set_major_formatter(ticks)
#ax7.xaxis.set_minor_locator(MultipleLocator(60))
ax7.set_xlim(0, 1440)
ax7.set_ylim(10, 50)
plt.xlabel("Hour of the day")
plt.ylabel("Average load, n=200 (kW)")
plt.savefig("C:\\Users\\alyci\\OneDrive - Nexus365\\Thesis\\Corrections\\demand-P-overall-weekend-3.png")
plt.close()
#plt.show()

# fig1, ax1 = plt.subplots()
# plt.grid(b=True, which='major', color='lightgrey', linestyle='-')
# ax1.boxplot([eval_energy['N_E_kWh']/200, eval_energy['S_E_kWh']/200, eval_energy['E_E_kWh']/200, eval_energy['W_E_kWh']/200, eval_energy['U_E_kWh']/200, eval_energy['R_E_kWh']/200, eval_energy['O_E_kWh']/200])
# ax1.set_xticklabels(['North', 'South', 'East', 'West', 'Urban', 'Rural', 'All'])
# plt.xlabel("Province or data subset")
# plt.ylabel("Average daily energy consumption per household (kWh)")
# ax1.set_ylim(1.75, 3.75)
# plt.show()
# plt.close()

# fig3, ax3 = plt.subplots()
# plt.plot(eval_power['minute'], 1000*eval_power['N_P_avg_kW']/200, label="North", c='purple')
# plt.plot(eval_power['minute'], 1000*eval_power['S_P_avg_kW']/200, label="South", c='green')
# plt.plot(eval_power['minute'], 1000*eval_power['E_P_avg_kW']/200, label="East", c='darkorange')
# plt.plot(eval_power['minute'], 1000*eval_power['W_P_avg_kW']/200, label="West", c='blue')
# plt.plot(eval_power['minute'], 1000*eval_power['U_P_avg_kW']/200, label="Urban", c='pink')
# plt.plot(eval_power['minute'], 1000*eval_power['R_P_avg_kW']/200, label="Rural", c='turquoise')
# plt.plot(eval_power['minute'], 1000*eval_power['O_P_avg_kW']/200, label="All", c='goldenrod')
# ax3.set_xlim(0, 1440)
# ax3.set_ylim(40, 220)
# plt.legend(loc='upper left')
# plt.xlabel("Minute")
# plt.ylabel("Average power consumption per household (W)")
# plt.show()

#fig6, ax6 = plt.subplots()
#plt.plot(case_power['minute'], 1000*case_power['Mapoton_P_avg_kW']/133, label="Mapoton", c='blue')
#plt.plot(case_power['minute'], 1000*case_power['General_P_avg_kW']/133, label="General", c='green')
#plt.plot(case_power['minute'], 1000*case_power['T1_Stochastic_P_avg_kW']/133, label="T1", c='purple')
#plt.plot(case_power['minute'], 1000*case_power['T2_Stochastic_P_avg_kW']/133, label="T2", c='goldenrod')
#plt.plot(case_power['minute'], 1000*case_power['T4_Stochastic_P_avg_kW']/133, label="T4", c='darkorange')
#plt.legend()
#ax6.set_xlim(0, 1440)
#plt.xlabel("Minute")
#plt.ylabel("Average power consumption per household (W)")
#plt.show()

#fig5, ax5 = plt.subplots()
#plt.grid(b=True, which='major', color='lightgrey', linestyle='-')
#ax5.boxplot([case_energy['T1_Stochastic_E_kWh']/133, case_energy['T2_Stochastic_E_kWh']/133, case_energy['Mapoton_E_kWh']/133, case_energy['General_E_kWh']/133, case_energy['T4_Stochastic_E_kWh']/133])
#ax5.set_xticklabels(['Tier 1', 'Tier 2', 'Spatially-specific', 'General', 'Tier 4'])
#plt.xlabel("Demand estimate")
#plt.ylabel("Average daily energy consumption per household (kWh)")
#ax1.set_ylim(0, 5)
#plt.show()
#plt.close()

#fig1, ax1 = plt.subplots()
#plt.grid(b=True, which='major', color='lightgrey', linestyle='-')
#ax1.boxplot([eval_energy['N_E_kWh']/200, eval_energy['S_E_kWh']/200, eval_energy['E_E_kWh']/200, eval_energy['W_E_kWh']/200, eval_energy['U_E_kWh']/200, eval_energy['R_E_kWh']/200, eval_energy['O_E_kWh']/200])
#ax1.set_xticklabels(['North', 'South', 'East', 'West', 'Urban', 'Rural', 'All'])
#plt.xlabel("Province or data subset")
#plt.ylabel("Average daily energy consumption per household (kWh)")
#ax1.set_ylim(0, 4)
#plt.show()
#plt.close()

#fig1, ax1 = plt.subplots()
#plt.grid(b=True, which='major', color='lightgrey', linestyle='-')
#subsets = ['North', 'South', 'East', 'West', 'Urban', 'Rural', 'All']
#energies = [eval_energy['N_E_kWh'].sum()/(200*31), eval_energy['S_E_kWh'].sum()/(200*31), eval_energy['E_E_kWh'].sum()/(200*31), eval_energy['W_E_kWh'].sum()/(200*31), eval_energy['U_E_kWh'].sum()/(200*31), eval_energy['R_E_kWh'].sum()/(200*31), eval_energy['O_E_kWh'].sum()/(200*31)]
#ax1.bar(subsets, energies)
#ax1.set_ylim(0, 4)
#plt.xlabel("Province or data subset")
#plt.ylabel("Average daily energy consumption per household (kWh)")
#plt.show()
#plt.close()

#fig5, ax5 = plt.subplots()
#plt.grid(b=True, which='major', color='lightgrey', linestyle='-')
#ax5.boxplot([case_energy['T1_Stochastic_E_kWh'], case_energy['T2_Stochastic_E_kWh'], case_energy['Mapoton_E_kWh'], case_energy['General_E_kWh'], case_energy['T4_Stochastic_E_kWh']])
#ax5.set_xticklabels(['Tier 1', 'Tier 2', 'Spatially-specific', 'General', 'Tier 4'])
#plt.xlabel("Demand estimate")
#plt.ylabel("Daily energy consumption, n=133 (kWh)")
#plt.show()
#plt.close()

# fig7, ax7 = plt.subplots()
# plt.plot(case_power['minute'], case_power['Mapoton_P_avg_kW'], label="Spatially-specific", c='blue')
# plt.fill_between(case_power['minute'], case_power['Mapoton_P_min_kW'], case_power['Mapoton_P_max_kW'], facecolor='lightblue', alpha=0.5)
# plt.plot(case_power['minute'], case_power['General_P_avg_kW'], label="General", c='green')
# plt.fill_between(case_power['minute'], case_power['General_P_min_kW'], case_power['General_P_max_kW'], facecolor='lightgreen', alpha=0.5)
# plt.plot(case_power['minute'], case_power['T1_Stochastic_P_avg_kW'], label="Tier 1", c='purple')
# plt.fill_between(case_power['minute'], case_power['T1_Stochastic_P_min_kW'], case_power['T1_Stochastic_P_max_kW'], facecolor='plum', alpha=0.5)
# plt.plot(case_power['minute'], case_power['T2_Stochastic_P_avg_kW'], label="Tier 2", c='goldenrod')
# plt.fill_between(case_power['minute'], case_power['T2_Stochastic_P_min_kW'], case_power['T2_Stochastic_P_max_kW'], facecolor='palegoldenrod', alpha=0.5)
# plt.plot(case_power['minute'], case_power['T4_Stochastic_P_avg_kW'], label="Tier 4", c='darkorange')
# plt.fill_between(case_power['minute'], case_power['T4_Stochastic_P_min_kW'], case_power['T4_Stochastic_P_max_kW'], facecolor='bisque', alpha=0.5)
# plt.legend(loc='upper left')
# ax7.set_xlim(0, 1440)
# ax7.set_ylim(0, 40)
# plt.xlabel("Minute")
# plt.ylabel("Mapoton load profile, n=133 (kW)")
# plt.show()


# fig7, ax7 = plt.subplots()
# plt.plot(eval_power['minute'], eval_power['N_P_avg_kW']/200, label="North", c='purple')
# plt.fill_between(eval_power['minute'], eval_power['N_P_min_kW']/200, eval_power['N_P_max_kW']/200, facecolor='plum', alpha=0.5)
# plt.plot(eval_power['minute'], eval_power['S_P_avg_kW']/200, label="South", c='green')
# plt.fill_between(eval_power['minute'], eval_power['S_P_min_kW']/200, eval_power['S_P_max_kW']/200, facecolor='lightgreen', alpha=0.5)
# plt.plot(eval_power['minute'], eval_power['E_P_avg_kW']/200, label="East", c='darkorange')
# plt.fill_between(eval_power['minute'], eval_power['E_P_min_kW']/200, eval_power['E_P_max_kW']/200, facecolor='bisque', alpha=0.5)
# plt.plot(eval_power['minute'], eval_power['W_P_avg_kW']/200, label="West", c='blue')
# plt.fill_between(eval_power['minute'], eval_power['W_P_min_kW']/200, eval_power['W_P_max_kW']/200, facecolor='lightblue', alpha=0.5)
# plt.plot(case_power['minute'], case_power['T1_Stochastic_P_avg_kW']/133, label="Tier 1", c='maroon')
# plt.fill_between(case_power['minute'], case_power['T1_Stochastic_P_min_kW']/133, case_power['T1_Stochastic_P_max_kW']/133, facecolor='indianred', alpha=0.5)
# plt.plot(case_power['minute'], case_power['T2_Stochastic_P_avg_kW']/133, label="Tier 2", c='goldenrod')
# plt.fill_between(case_power['minute'], case_power['T2_Stochastic_P_min_kW']/133, case_power['T2_Stochastic_P_max_kW']/133, facecolor='palegoldenrod', alpha=0.5)
# plt.plot(case_power['minute'], case_power['T4_Stochastic_P_avg_kW']/133, label="Tier 4", c='teal')
# plt.fill_between(case_power['minute'], case_power['T4_Stochastic_P_min_kW']/133, case_power['T4_Stochastic_P_max_kW']/133, facecolor='paleturquoise', alpha=0.5)
# plt.legend(loc='upper left')
# ax7.set_xlim(0, 1440)
# #ax7.set_ylim(0, 40)
# plt.xlabel("Minute")
# plt.ylabel("Average household load profile (kW)")
# plt.show()

# fig2, ax2 = plt.subplots()
# plt.grid(b=True, which='major', color='lightgrey', linestyle='-')
# ax2.boxplot([eval_energy['U_E_kWh']/200, eval_energy['R_E_kWh']/200, eval_energy['O_E_kWh']/200])
# ax2.set_xticklabels(['Urban', 'Rural', 'All'])
# plt.xlabel("Context")
# plt.ylabel("Daily energy consumption per household (kWh)")
# ax2.set_ylim(1.75, 3.75)
# plt.show()
# plt.close()

# fig4, ax4 = plt.subplots()
# plt.plot(eval_power['minute'], 1000*eval_power['U_P_avg_kW']/200, label="Urban", c='maroon')
# plt.plot(eval_power['minute'], 1000*eval_power['R_P_avg_kW']/200, label="Rural", c='teal')
# plt.plot(eval_power['minute'], 1000*eval_power['O_P_avg_kW']/200, label="All", c='goldenrod')
# plt.legend(loc='upper left')
# ax4.set_xlim(0, 1440)
# ax4.set_ylim(0, 200)
# plt.xlabel("Minute")
# plt.ylabel("Average power consumption per household (W)")
# plt.show()

# fig7, ax7 = plt.subplots()
# plt.plot(eval_power['minute'], eval_power['N_P_avg_kW'], label="Average", c='purple')
# plt.fill_between(eval_power['minute'], eval_power['N_P_min_kW'], eval_power['N_P_max_kW'], color='plum', label="Range") # Label extrema?
# plt.legend()
# ax7.set_xlim(0, 1440)
# plt.xlabel("Minute")
# ax7.set_ylim(0, 55)
# plt.ylabel("North community load profile, n=200 (kW)")
# plt.show()
#
# fig7, ax7 = plt.subplots()
# plt.plot(eval_power['minute'], eval_power['S_P_avg_kW'], label="Average", c='green')
# plt.fill_between(eval_power['minute'], eval_power['S_P_min_kW'], eval_power['S_P_max_kW'], color='lightgreen', label="Range") # Label extrema?
# plt.legend()
# ax7.set_xlim(0, 1440)
# plt.xlabel("Minute")
# ax7.set_ylim(0, 55)
# plt.ylabel("South community load profile, n=200 (kW)")
# plt.show()
#
# fig7, ax7 = plt.subplots()
# plt.plot(eval_power['minute'], eval_power['E_P_avg_kW'], label="Average", c='darkorange')
# plt.fill_between(eval_power['minute'], eval_power['E_P_min_kW'], eval_power['E_P_max_kW'], color='bisque', label="Range") # Label extrema?
# plt.legend()
# ax7.set_xlim(0, 1440)
# plt.xlabel("Minute")
# ax7.set_ylim(0, 55)
# plt.ylabel("East community load profile, n=200 (kW)")
# plt.show()
#
# fig7, ax7 = plt.subplots()
# plt.plot(eval_power['minute'], eval_power['W_P_avg_kW'], label="Average", c='blue')
# plt.fill_between(eval_power['minute'], eval_power['W_P_min_kW'], eval_power['W_P_max_kW'], color='lightblue', label="Range") # Label extrema?
# plt.legend()
# ax7.set_xlim(0, 1440)
# ax7.set_ylim(0, 55)
# plt.xlabel("Minute")
# plt.ylabel("West community load profile, n=200 (kW)")
# plt.show()

# fig5, ax5 = plt.subplots()
# plt.grid(b=True, which='major', color='lightgrey', linestyle='-')
# ax5.boxplot([case_energy['T1_Stochastic_E_kWh']/133, case_energy['T2_Stochastic_E_kWh']/133, case_energy['T4_Stochastic_E_kWh']/133, case_energy['Mapoton_E_kWh']/133, case_energy['General_E_kWh']/133])
# ax5.set_xticklabels(['T1', 'T2', 'T4', 'Mapoton', 'General'])
# plt.xlabel("Case")
# plt.ylabel("Daily energy consumption per household (kWh)")
# plt.show()
# plt.close()
